generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Seed configuration
generator seed {
  provider = "tsx"
  output   = "prisma/seed/main.ts"
}

model User {
  id                      String      @id
  email                   String      @unique
  name                    String?
  username                String?
  avatar                  String?
  passwordHash            String
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  wakeUpTime              String?
  sleepTime               String?
  focusStrategy           String?     @default("POMODORO")
  emailNotifications      Boolean?    @default(true)
  emailVerificationToken  String?
  emailVerificationExpires DateTime?
  emailVerified           Boolean?    @default(false)
  lastLogin               DateTime?
  phone                   String?
  refreshToken            String?
  resetToken              String?
  resetTokenExpires       DateTime?
  twoFactorEnabled        Boolean     @default(false)
  twoFactorSecret         String?
  smsNotifications        Boolean?    @default(false)
  biometricEnabled        Boolean     @default(false)
  biometricCredentials    Json        @default("[]")

  // Gamification fields
  totalXP                 Int         @default(0)
  level                   Int         @default(1)
  currentStreak           Int         @default(0)
  longestStreak           Int         @default(0)
  totalStudyTime          Int         @default(0)
  tasksCompleted          Int         @default(0)
  examsPassed             Int         @default(0)
  pomodoroSessions        Int         @default(0)
  deepWorkSessions        Int         @default(0)

  subjectEnrollments      SubjectEnrollment[]
  studySessions           StudySession[]
  tasks                   Task[]
  reminders               Reminder[]
  progressSnapshots       ProgressSnapshot[]
  securityLogs            SecurityLog[]
  sessions                Session[]
  achievements            UserAchievement[]
  customGoals             CustomGoal[]
}

model SubjectEnrollment {
  id                String   @id
  userId            String
  subject           String
  targetWeeklyHours Int      @default(0)
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudySession {
  id          String   @id
  userId      String
  subject     String
  startTime   DateTime
  endTime     DateTime
  durationMin Int
  focusScore  Int      @default(0)
  notes       String?
  strategy    String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String   @id
  userId      String
  title       String
  description String?
  subject     String?
  status      String   @default("PENDING")
  dueAt       DateTime?
  scheduledAt DateTime?
  completedAt DateTime?
  priority    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reminder {
  id        String   @id
  userId    String
  title     String
  message   String?
  remindAt  DateTime
  repeat    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProgressSnapshot {
  id                String   @id
  userId            String
  date              DateTime
  totalStudyMinutes Int      @default(0)
  averageFocusScore Float    @default(0)
  completedTasks    Int      @default(0)
  streakDays        Int      @default(0)
  gradeAverage      Float?
  improvementRate   Float?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([userId, date])
}

model Resource {
  id          String   @id
  subject     String
  title       String
  description String?
  url         String
  free        Boolean  @default(true)
  type        String
  source      String?
  createdAt   DateTime @default(now())
}

model Exam {
  id        String   @id
  subject   String
  title     String
  year      Int
  url       String
}

model Session {
  id          String   @id
  userId      String
  userAgent   String
  ip          String
  deviceInfo  String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  lastAccessed DateTime @default(now())
  isActive    Boolean  @default(true)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model SecurityLog {
  id         String   @id
  userId     String
  eventType  String
  ip         String
  userAgent  String
  deviceInfo String?
  location   String?
  metadata   String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
}

// Gamification Models
model Achievement {
  id          String   @id
  key         String   @unique
  title       String
  description String
  icon        String
  category    String   // 'study', 'tasks', 'exams', 'time', 'streak'
  difficulty  String   // 'easy', 'medium', 'hard', 'expert'
  xpReward    Int
  requirements Json
  isSecret    Boolean  @default(false)
  createdAt   DateTime @default(now())

  users       UserAchievement[]

  @@index([category])
  @@index([difficulty])
}

model UserAchievement {
  id            String   @id
  userId        String
  achievementKey String
  earnedAt      DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementKey], references: [key], onDelete: Cascade)

  @@unique([userId, achievementKey])
  @@index([userId])
  @@index([achievementKey])
}

model CustomGoal {
  id          String   @id
  userId      String
  title       String
  description String?
  targetValue Float
  currentValue Float   @default(0)
  unit        String   // 'minutes', 'count', 'percentage', etc.
  category    String   // 'study', 'tasks', 'exams', 'custom'
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  completedAt DateTime?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([isCompleted])
}

// Temporary authentication states for serverless compatibility
model TwoFactorChallenge {
  id        String   @id
  userId    String?
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@index([userId])
}

model BiometricChallenge {
  id        String   @id
  challenge String
  type      String   // 'register' or 'authenticate'
  userId    String?
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@index([type])
  @@index([userId])
}
