
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum SubjectType {
  MATH
  PHYSICS
  CHEMISTRY
  ARABIC
  ENGLISH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum FocusStrategy {
  POMODORO
  EIGHTY_TWENTY
  DEEP_WORK
  TIME_BLOCKING
  NO_DISTRACTION
}

// Enums جديدة للذكاء الاصطناعي
enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

enum TipCategory {
  STUDY_STRATEGIES
  OVERCOMING_CHALLENGES
  EDUCATIONAL_RESOURCES
  STUDY_PLAN
  PERFORMANCE_IMPROVEMENT
}

enum TipPriority {
  HIGH
  MEDIUM
  LOW
}

// Enums جديدة للدرجات والامتحانات
enum GradeType {
  EXAM
  QUIZ
  HOMEWORK
  PROJECT
  PARTICIPATION
  OTHER
}

enum ExamType {
  MIDTERM
  FINAL
  QUIZ
  PRACTICE
  OTHER
}

// Models
model User {
  id               String               @id @default(cuid())
  email            String               @unique
  name             String?
  passwordHash     String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  // Settings
  wakeUpTime       String?
  sleepTime        String?
  focusStrategy    FocusStrategy?       @default(POMODORO)

  subjects         SubjectEnrollment[]
  studySessions    StudySession[]
  tasks            Task[]
  reminders        Reminder[]
  progress         ProgressSnapshot[]
  exams            ExamResult[]
  achievements     Achievement[]
  schedules        Schedule[]
  offlineLessons   OfflineLesson[]
  recommendations  Recommendation[]

  // علاقات جديدة مع الذكاء الاصطناعي
  aiGeneratedExams AiGeneratedExam[]
  aiInteractions   AiInteraction[]

  // علاقات جديدة مع الدرجات والامتحانات
  grades           UserGrade[]

  // علاقات الرسائل
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  // علاقات المناسبات
  organizedEvents  Event[]
  attendedEvents   EventAttendee[]

  // علاقات الإعلانات والمسابقات
  announcements   Announcement[]
  organizedContests Contest[]
  participatedContests ContestParticipant[]

  // علاقات الإشعارات
  notifications    Notification[]
}

model SubjectEnrollment {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  subject   SubjectType
  targetWeeklyHours Int  @default(0)

  createdAt DateTime @default(now())

  @@unique([userId, subject])
}

model StudySession {
  id           String       @id @default(cuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  subject      SubjectType
  startTime    DateTime
  endTime      DateTime
  durationMin  Int
  focusScore   Int          @default(0) // 0-100
  notes        String?
  strategy     FocusStrategy?

  createdAt    DateTime     @default(now())
}

model Task {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String?
  subject     SubjectType?
  status      TaskStatus  @default(PENDING)
  dueAt       DateTime?
  scheduledAt DateTime?
  completedAt DateTime?
  priority    Int         @default(0)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Reminder {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  title     String
  message   String?
  remindAt  DateTime
  repeat    String?   // CRON or simple rule like daily, weekly

  createdAt DateTime  @default(now())
}

model ProgressSnapshot {
  id                 String     @id @default(cuid())
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  date               DateTime
  totalStudyMinutes  Int        @default(0)
  averageFocusScore  Float      @default(0)
  completedTasks     Int        @default(0)
  streakDays         Int        @default(0)
  gradeAverage       Float?     // optional if user inputs grades
  improvementRate    Float?     // calculated trend
}

model Resource {
  id          String       @id @default(cuid())
  subject     SubjectType
  title       String
  description String?
  url         String
  free        Boolean      @default(true)
  type        String       // video, simulator, app, platform, past-paper
  source      String?
  createdAt   DateTime     @default(now())
}

model Exam {
  id          String   @id @default(cuid())
  subject     SubjectType
  title       String
  year        Int
  url         String    // link to real past paper
  type        ExamType  @default(PRACTICE)
  createdAt   DateTime  @default(now())

  // Back relation
  results     ExamResult[]
}

model ExamResult {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  exam       Exam     @relation(fields: [examId], references: [id])
  examId     String
  score      Float
  takenAt    DateTime @default(now())
  teacherId  String?  // Reference to the teacher who gave the exam

  // Back relation
  grades     UserGrade[]
}

model Achievement {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  key        String   @unique
  title      String
  description String?
  earnedAt   DateTime @default(now())
}

model Schedule {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String   // Intensive, Balanced, Light, or custom
  weeklyHours Int      @default(0)
  // JSON string to store day -> subjects/time blocks
  planJson    String
  active      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@unique([userId, active])
}

model Teacher {
  id          String   @id @default(cuid())
  name        String
  subject     SubjectType
  onlineUrl   String?
  rating      Float?   // optional user rating
  notes       String?

  // مفتاح فريد مركب لمنع التكرار
  @@unique([name, subject])

  // Back relation
  lessons     OfflineLesson[]
  examResults  ExamResult[]
  grades      UserGrade[]
}

model OfflineLesson {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  teacherId   String
  title       String
  location    String
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
}

model Recommendation {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  message     String
  createdAt   DateTime @default(now())
}

// نماذج جديدة للذكاء الاصطناعي
model AiGeneratedExam {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  subject     SubjectType
  year        Int
  lesson      String
  difficulty  String?
  timeLimit   Int?        // بالدقائق
  createdAt   DateTime    @default(now())

  // العلاقة مع الأسئلة
  questions   AiQuestion[]
  // العلاقة مع نتائج الاختبارات
  testResults TestResult[]
}

model AiQuestion {
  id          String       @id @default(cuid())
  exam        AiGeneratedExam @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId      String
  question    String
  type        QuestionType
  options     String?      // JSON array for multiple choice
  correctAnswer String
  explanation String?
  difficulty  String      // easy, medium, hard
  points      Int         @default(1)
  createdAt   DateTime     @default(now())
}

model AiInteraction {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  type        String   // "chat", "exam_generation", "tips_request", "teacher_search"
  request     String   // JSON string of the request
  response    String   // JSON string of the response
  createdAt   DateTime @default(now())
}

// نموذج نتائج الاختبارات
model TestResult {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  exam          AiGeneratedExam @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId        String
  score         Float
  totalPoints   Float
  timeSpent     Int      // بالثواني
  completedAt   DateTime @default(now())

  // تخزين الإجابات كـ JSON
  answers       String   // JSON string of answers

  // التغذية الراجعة من الذكاء الاصطناعي
  feedback      String   // JSON string of feedback

  createdAt     DateTime @default(now())
}

// نماذج جديدة للدرجات والامتحانات
model UserGrade {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  subject       SubjectType
  grade         Float
  maxGrade      Float       @default(100)
  date          DateTime    @default(now())
  notes         String?
  isOnline      Boolean     @default(false)
  assignmentType GradeType   @default(OTHER)

  // علاقات مع المدرسين ونتائج الامتحانات
  teacherId     String?
  teacher       Teacher?    @relation(fields: [teacherId], references: [id])
  examResultId  String?
  examResult    ExamResult? @relation(fields: [examResultId], references: [id])

  createdAt     DateTime    @default(now())
}

// نماذج المنتدى
model ForumCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String   @default("📝")
  createdAt   DateTime @default(now())

  // علاقة مع المواضيع
  posts       ForumPost[]
}

model ForumPost {
  id          String   @id @default(cuid())
  title       String
  content     String
  views       Int      @default(0)
  isPinned    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // علاقات
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId  String
  category    ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  replies     ForumReply[]
}

model ForumReply {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // علاقات
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// نموذج الكتب للمكتبة الرقمية
model Book {
  id          String   @id @default(cuid())
  title       String
  author      String
  description String
  subject     String
  coverUrl    String?
  downloadUrl String
  rating      Float    @default(0)
  views       Int      @default(0)
  downloads   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        String[]  // Array of tags as strings
}

// نماذج الدورات التعليمية
enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Course {
  id            String      @id @default(cuid())
  title         String
  description   String
  instructorId  String
  subject       String
  level         CourseLevel
  duration      Int         // in hours
  thumbnailUrl  String?
  price         Float       @default(0)
  rating        Float       @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  tags          String[]    // Array of tags as strings

  // علاقات
  instructor    User        @relation(fields: [instructorId], references: [id])
  enrollments   CourseEnrollment[]
  lessons       CourseLesson[]
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  progress  Float    @default(0)  // 0-100
  enrolledAt DateTime @default(now())
  completedAt DateTime?

  // علاقات
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model CourseLesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String   // HTML content
  videoUrl    String?
  duration    Int      // in minutes
  order       Int
  courseId    String
  createdAt   DateTime @default(now())

  // علاقات
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress[]

  @@unique([courseId, order])
}

model CourseProgress {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  completed  Boolean  @default(false)
  progress   Float    @default(0)  // 0-100
  watchedAt  DateTime?

  // علاقات
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     CourseLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

// نماذج المدونة التعليمية
model BlogCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String   @default("📝")
  createdAt   DateTime @default(now())

  // علاقة مع المقالات
  posts       BlogPost[]
}

model BlogPost {
  id            String   @id @default(cuid())
  title         String
  excerpt       String
  content       String
  coverImageUrl String?
  publishedAt   DateTime @default(now())
  readTime      Int      // in minutes
  views         Int      @default(0)
  tags          String[]  // Array of tags as strings

  // علاقات
  authorId      String
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId    String
  category      BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

// نموذج الرسائل
model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)

  // علاقات
  senderId   String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

// نماذج المناسبات
model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String?
  startDate   DateTime
  endDate     DateTime
  imageUrl    String?
  category    String
  isPublic    Boolean  @default(true)
  maxAttendees Int?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // علاقات
  organizerId String
  organizer   User     @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  attendees   EventAttendee[]
}

model EventAttendee {
  id        String   @id @default(cuid())
  joinedAt  DateTime @default(now())

  // علاقات
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

// نماذج الإعلانات
model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  imageUrl    String?
  publishedAt DateTime @default(now())
  expiresAt   DateTime?
  priority    String   // low, medium, high, urgent
  category    String
  tags        String[]
  views       Int      @default(0)

  // علاقات
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// نماذج المسابقات
model Contest {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  startDate   DateTime
  endDate     DateTime
  prize       String?
  category    String
  tags        String[]
  createdAt   DateTime @default(now())

  // علاقات
  organizerId String
  organizer   User     @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  participants ContestParticipant[]
}

model ContestParticipant {
  id        String   @id @default(cuid())
  joinedAt  DateTime @default(now())

  // علاقات
  contestId String
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contestId, userId])
}

// نموذج الإشعارات
model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  title     String
  message   String
  type      String   @default("info") // info, success, warning, error
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
